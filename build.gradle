buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}
plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'java'
    id 'jacoco'
}
jacoco {
    toolVersion = "0.8.8"
}

group = 'com.project'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = "11"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
//    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//    implementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'com.h2database:h2'

//    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
//    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
//    implementation 'javax.validation:validation-api'
    implementation 'org.hibernate.validator:hibernate-validator'
//    implementation 'org.modelmapper:modelmapper:3.1.0'
//    implementation 'org.projectlombok:lombok'
    implementation 'mysql:mysql-connector-java'
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.0'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

jacocoTestReport {
    reports {
        csv.enabled true
        xml.enabled true
    }
}
test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }
}
jacocoTestReport {

    dependsOn test
    finalizedBy 'jacocoTestCoverageVerification'
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = "CLASS"

            limit {
                counter = "CLASS"
                value = "COVEREDRATIO"
                minimum = "0.90".toBigDecimal()
            }
        }
    }
}






//querydsl 추가
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
